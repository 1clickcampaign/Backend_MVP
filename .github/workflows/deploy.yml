name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: datapull/fastapi-backend
  ECS_CLUSTER: fastapi-backend-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json  # Path to your task definition file
  CONTAINER_NAME: fastapi-backend  # Make sure this matches the name in your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition fastapi-backend --region ${{ env.AWS_REGION }})
        TASK_FAMILY=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.family')
        aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} \
                         --task-definition $TASK_FAMILY \
                         --launch-type FARGATE \
                         --network-configuration "awsvpcConfiguration={subnets=[subnet-0f6e20b38046dcc24],securityGroups=[sg-0b537ae831b15a808],assignPublicIp=ENABLED}" \
                         --region ${{ env.AWS_REGION }}
